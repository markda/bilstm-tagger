# -*- coding: utf-8 -*-

from parser.modules import (CHAR_LSTM, MLP, BiLSTM,
                            IndependentDropout, SharedDropout)

import torch
import torch.nn as nn
from torch.nn.utils.rnn import (pack_padded_sequence, pad_packed_sequence,
                                pad_sequence)


class LanguageModel(nn.Module):

    def __init__(self, config, embeddings):
        super(LanguageModel, self).__init__()

        self.config = config

        # the embedding layer
        self.pretrained = nn.Embedding.from_pretrained(embeddings)
        self.embed = nn.Embedding(num_embeddings=config.n_words,
                                  embedding_dim=config.n_embed)

        # the char-lstm layer
        self.char_lstm = CHAR_LSTM(n_chars=config.n_chars,
                                   n_embed=config.n_char_embed,
                                   n_out=config.n_char_out)

        self.embed_dropout = IndependentDropout(p=config.embed_dropout)

        # the word-lstm layer
        if config.n_tag_embed !=0:
            self.lstm = BiLSTM(input_size=config.n_embed+config.n_char_out+config.n_tag_embed,
                               hidden_size=config.n_lstm_hidden,
                               num_layers=config.n_lstm_layers,
                               dropout=config.lstm_dropout,
                               return_f_b=True)
        else:
            self.lstm = BiLSTM(input_size=config.n_embed+config.n_char_out,
                               hidden_size=config.n_lstm_hidden,
                               num_layers=config.n_lstm_layers,
                               dropout=config.lstm_dropout,
                               return_f_b=True)

        self.lstm_dropout = SharedDropout(p=config.lstm_dropout)

        # the MLP layers
        self.mlp_f = MLP(n_in=config.n_lstm_hidden,
                         n_hidden=config.n_words,
                         dropout=config.mlp_dropout)
        self.mlp_b = MLP(n_in=config.n_lstm_hidden,
                         n_hidden=config.n_words,
                         dropout=config.mlp_dropout)

        self.pad_index = config.pad_index
        self.unk_index = config.unk_index

        self.reset_parameters()

    def reset_parameters(self):
        nn.init.zeros_(self.embed.weight)

    def forward(self, words, chars):
        # get the mask and lengths of given batch
        mask = words.ne(self.pad_index)
        lens = mask.sum(dim=1)
        # set the indices larger than num_embeddings to unk_index
        ext_mask = words.ge(self.embed.num_embeddings)
        ext_words = words.masked_fill(ext_mask, self.unk_index)

        # get outputs from embedding layers
        embed = self.pretrained(words) + self.embed(ext_words)

        char_embed = self.char_lstm(chars[mask])
        char_embed = pad_sequence(torch.split(char_embed, lens.tolist()), True)

        # concatenate the word and char representations
        if self.config.n_tag_embed !=0:
            tag_embed = self.tag_embed(tags)
            embed, char_embed, tag_embed = self.embed_dropout(embed,
                                                   char_embed,
                                                   tag_embed)
            x = torch.cat((embed, char_embed, tag_embed), dim=-1)
        else:

            embed, char_embed, dummy = self.embed_dropout(embed,
                                                          char_embed,
                                                          char_embed)
            x = torch.cat((embed, char_embed), dim=-1)


        sorted_lens, indices = torch.sort(lens, descending=True)
        inverse_indices = indices.argsort()
        x = pack_padded_sequence(x[indices], sorted_lens, True)
        _, f_output, b_output = self.lstm(x)
        f_output, _ = pad_packed_sequence(f_output, True)
        f_output = self.lstm_dropout(f_output)[inverse_indices]
        b_output, _ = pad_packed_sequence(b_output, True)
        b_output = self.lstm_dropout(b_output)[inverse_indices]

        # apply MLPs to the BiLSTM output states
        f_logits = self.mlp_f(f_output)
        b_logits = self.mlp_b(b_output)

        return f_logits, b_logits

    @classmethod
    def load(cls, fname):
        if torch.cuda.is_available():
            device = torch.device('cuda')
        else:
            device = torch.device('cpu')
        state = torch.load(fname, map_location=device)
        lm = cls(state['config'], state['embeddings'])
        lm.load_state_dict(state['state_dict'])
        lm.to(device)

        return lm

    def save(self, fname):
        state = {
            'config': self.config,
            'embeddings': self.pretrained.weight,
            'state_dict': self.state_dict()
        }
        torch.save(state, fname)
